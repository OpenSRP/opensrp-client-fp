buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.3'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc2'
    }
}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android' // apply kotlin android plugin
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'
//apply plugin: 'io.fabric'
jacoco {
    toolVersion = jacocoVersion
}
ext.versionMajor = 1
ext.versionMinor = 2
ext.versionPatch = 14
ext.versionClassifier = null
ext.isSnapshot = false
ext.minimumSdkVersion = androidMinSdkVersion

android {

    /*
    * This allows you to run the app in the release variant.  make sure to add this configs to the
    * local.properties files when you need to use them
    * */
    if (project.rootProject.file("local.properties").exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        if (properties != null && properties.containsKey("store.file") && properties.containsKey("store.password") && properties.containsKey("key.password")) {
            signingConfigs {
                release {
                    storeFile file(properties['store.file'])
                    storePassword properties['store.password']
                    keyAlias = 'release'
                    keyPassword properties['key.password']
                }
                debug {
                    storeFile file(properties['store.file'])
                    storePassword properties['store.password']
                    keyAlias = 'release'
                    keyPassword properties['key.password']
                }
            }
        }
    }

    useLibrary 'org.apache.http.legacy'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "org.smartregister.sample.fp"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode generateVersionCode()
        versionName generateVersionName()
        buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
        buildConfigField "boolean", "TIME_CHECK", "false"
        buildConfigField "String", "SYNC_TYPE", '"teamId"'
        buildConfigField "int", "MAX_SYNC_RETRIES", '3'
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "IS_SYNC_SETTINGS", "true"
        buildConfigField "long", "EVENT_VERSION", System.currentTimeMillis() + "L"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        if (properties != null && properties.containsKey("store.file") && properties.containsKey("store.password") && properties.containsKey("key.password")) {
            signingConfig signingConfigs.release
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [eventBusIndex: 'org.smartregister.sample.fp.FPEventBusIndex']
            }
        }

        if (project.rootProject.file("local.properties").exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            if (properties != null && properties.containsKey("flurry.api.key")) {
                buildConfigField "String", "FLURRY_API_KEY", properties["flurry.api.key"]
            } else {
                println("Flurry Analytics API key config variables is not set in your local.properties")
                buildConfigField "String", "FLURRY_API_KEY", "\"sample_key\""
            }
        } else {
            println("local.properties does not exist")
            buildConfigField "String", "FLURRY_API_KEY", "\"sample_key\""
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", 'opensrp_url', "https://who-fp-stage.smartregister.org/opensrp/"
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '1'
            buildConfigField "int", "DATABASE_VERSION", '1'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '180'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '180'
            buildConfigField "int", "VIEW_SYNC_CONFIGURATIONS_MINUTES", '15'
            buildConfigField "int", "CLIENT_SETTINGS_SYNC_MINUTES", '15'
        }

        debug {
            resValue "string", 'opensrp_url', "https://who-fp-stage.smartregister.org/opensrp/"
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "DATABASE_VERSION", '1'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "false"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '15'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '15'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '15'
            buildConfigField "int", "VIEW_SYNC_CONFIGURATIONS_MINUTES", '15'
            buildConfigField "int", "CLIENT_SETTINGS_SYNC_MINUTES", '15'
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'

    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

/**
 * Generates the version code following the naming method describe here
 * https://medium.com/@maxirosson/versioning-android-apps-d6ec171cfd82
 * @return version code
 */
private Integer generateVersionCode() {
    //return ext.minimumSdkVersion * 10000000 + ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch This bit will be activated after we are sure of the clients minimum sdk version.
    return ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

/**
 * Generates the version name following the naming method describe here
 * https://medium.com/@maxirosson/versioning-android-apps-d6ec171cfd82
 * @return version name
 */
private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
    if (ext.versionClassifier == null && ext.isSnapshot) {
        ext.versionClassifier = "SNAPSHOT"
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + ext.versionClassifier
    }
    return versionName;
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

dependencies {
    def powerMockVersion = '2.0.4'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':opensrp-fp')

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation('org.smartregister:opensrp-client-core:1.9.4-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'net.zetetic', module: 'android-database-sqlcipher'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.rengwuxian.materialedittext', module: 'library'
    }

    implementation('org.smartregister:opensrp-client-configurable-views:1.1.5-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    implementation('org.smartregister:opensrp-client-native-form:1.7.32-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'org.yaml', module: 'snakeyaml'
        exclude group: 'io.ona.rdt-capture', module: 'lib'
    }
    implementation('com.android.support:design:29.0.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
    }
    //implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.android.support:recyclerview-v7:29.0.0'
    implementation 'com.android.support:cardview-v7:29.0.0'
    //implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation 'net.zetetic:android-database-sqlcipher:4.2.0@aar'
    implementation "androidx.core:core-ktx:1.2.0"
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.25'
    implementation 'id.zelory:compressor:2.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation 'de.hdodenhof:circleimageview:3.0.1'
    implementation 'org.jeasy:easy-rules-core:3.3.0'
    implementation 'org.jeasy:easy-rules-mvel:3.3.0'
    implementation 'com.flurry.android:analytics:11.6.0@aar'
    implementation('com.google.firebase:firebase-analytics:16.5.0') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    /*implementation('com.crashlytics.sdk.android:crashlytics:2.10.1') {
        transitive = true
    }*/
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'org.greenrobot:eventbus:3.1.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation('com.squareup:fest-android:1.0.8') {
        exclude module: 'support-v4'
    }
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.robolectric:shadows-multidex:4.3.1'
    testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
}
repositories {
    mavenCentral()
}
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}